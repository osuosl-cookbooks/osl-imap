require_relative '../../spec_helper'

describe 'osl-imap-test::no_ssl' do
  include_context 'dovecot_stubs'

  ALL_PLATFORMS.each do |p|
    context "#{p[:platform]} #{p[:version]}" do
      cached(:chef_run) do
        ChefSpec::SoloRunner.new(p.dup.merge(
          step_into: %w(osl_imap_dovecot)
        )).converge(described_recipe)
      end

      include_context 'dovecot_stubs'

      it 'converges successfully' do
        expect { chef_run }.to_not raise_error
      end

      it do
        is_expected.to create_template('/etc/dovecot/dovecot.conf').with(
          cookbook: 'osl-imap',
          variables: {
            auth_mechanisms: 'plain login',
            auth_type: 'system',
            auth_username_format: '%n',
            extra_options: %w(auth_verbose=yes),
            mail_location: 'maildir:~/Maildir',
            mbox_write_locks: 'dotlock fcntl',
            passdb: [],
            protocols: 'imap pop3',
            ssl_cert: nil,
            ssl_key: nil,
            userdb: [],
          }
        )
      end

      it do
        is_expected.to render_file('/etc/dovecot/dovecot.conf').with_content(
          <<~EOF
            # This file was generated by Chef Infra
            # Do NOT modify this file by hand.
            auth_mechanisms = plain login
            auth_username_format = %n
            mail_location = maildir:~/Maildir
            mbox_write_locks = dotlock fcntl

            passdb {
              args = dovecot
              driver = pam
            }
            userdb {
              driver = passwd
            }

            protocols = imap pop3
            service auth {
              unix_listener /var/spool/postfix/private/auth {
                group = postfix
                mode = 0660
                user = postfix
              }
            }
            ssl = no
            disable_plaintext_auth = no
            service imap-login {
              inet_listener imap {
                address = 127.0.0.1
                port = 143
              }
            }
            ssl_cipher_list = ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:!DES-CBC3-SHA:!DSS
            ssl_options = no_compression no_ticket
            ssl_prefer_server_ciphers = yes

            # Extra options
            auth_verbose=yes
          EOF
        )
      end

      it { expect(chef_run.template('/etc/dovecot/dovecot.conf')).to notify('service[dovecot]').to(:reload) }
      it { is_expected.to_not create_template '/etc/dovecot/dovecot-sql.conf.ext' }
      it { is_expected.to_not create_template '/etc/dovecot/dovecot-ldap.conf.ext' }
      it { is_expected.to enable_service 'dovecot' }
      it { is_expected.to start_service 'dovecot' }
    end
  end
end
